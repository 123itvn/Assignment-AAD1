/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import controllers.FileStream;
import java.io.File;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import models.People;

/**
 *
 * @author TOAN
 */
public class AppMain extends javax.swing.JFrame {

    ArrayList<People> pList = new ArrayList<People>();
    
    public AppMain() {
        initComponents();
        this.setLocation(300, 120);
        
        JRootPane rootPane = SwingUtilities.getRootPane(btnSearch);
        rootPane.setDefaultButton(btnSearch);
       
        GetAllPeople();
    }
    
    public void GetAllPeople() {
        int count = 1;
        pList = FileStream.readFile();
        
        Vector header = new Vector();
        header.add("#");
        header.add("User");
        header.add("Full name");
        header.add("Email");

        Vector data = new Vector();
        for (People p : pList) {
            Vector row = new Vector();
            row.add(" " + count++);
            row.add(" " + p.getUser());
            row.add(" " + p.getFullName());
            row.add(" " + p.getEmail());

            data.add(row);
        }

        DefaultTableModel dtb = new DefaultTableModel(data, header);
        dtb.fireTableDataChanged();
        tblPeople.setModel(dtb);

        //tblPeople.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblPeople.getColumnModel().getColumn(0).setPreferredWidth(25);
        tblPeople.getColumnModel().getColumn(1).setPreferredWidth(85);
        tblPeople.getColumnModel().getColumn(2).setPreferredWidth(240);
        tblPeople.getColumnModel().getColumn(3).setPreferredWidth(355);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu = new javax.swing.JPopupMenu();
        mnuAdd = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenuItem();
        mnuDel = new javax.swing.JMenuItem();
        fileChooser = new javax.swing.JFileChooser();
        jToolBar = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        btnImport = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnAccount = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cboSearch = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        tblPeople = new javax.swing.JTable();
        mnuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuAddPeople = new javax.swing.JMenuItem();
        mnuEditPeople = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mnuImport = new javax.swing.JMenuItem();
        mnuExport = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();

        mnuAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/add-icon.png"))); // NOI18N
        mnuAdd.setText("Add People");
        mnuAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddActionPerformed(evt);
            }
        });
        jPopupMenu.add(mnuAdd);

        mnuEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/edit_user.png"))); // NOI18N
        mnuEdit.setText("Edit");
        mnuEdit.setToolTipText("");
        mnuEdit.setContentAreaFilled(false);
        mnuEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditActionPerformed(evt);
            }
        });
        jPopupMenu.add(mnuEdit);

        mnuDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resource/delete-512.png"))); // NOI18N
        mnuDel.setText("Delete");
        mnuDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDelActionPerformed(evt);
            }
        });
        jPopupMenu.add(mnuDel);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(680, 410));

        jToolBar.setRollover(true);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/add-icon.png"))); // NOI18N
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jToolBar.add(btnAdd);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/edit_user.png"))); // NOI18N
        btnUpdate.setFocusable(false);
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jToolBar.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/delete-512.png"))); // NOI18N
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jToolBar.add(btnDelete);

        jToolBar2.setRollover(true);

        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/doc_import.png"))); // NOI18N
        btnImport.setFocusable(false);
        btnImport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnImport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });
        jToolBar2.add(btnImport);

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/doc_export.png"))); // NOI18N
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });
        jToolBar2.add(btnExport);

        btnAccount.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/basic1-111_user_security-128.png"))); // NOI18N
        btnAccount.setFocusable(false);
        btnAccount.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAccount.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(btnAccount);

        jToolBar.add(jToolBar2);

        jToolBar3.setRollover(true);

        txtSearch.setText("Tìm kiếm");
        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        jToolBar3.add(txtSearch);

        jLabel1.setText(" ");
        jToolBar3.add(jLabel1);

        cboSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { " Tìm theo user", " Tìm theo full name", " Tìm theo domain" }));
        jToolBar3.add(cboSearch);

        jLabel2.setText(" ");
        jToolBar3.add(jLabel2);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/basic1-015_search_zoom_find-128.png"))); // NOI18N
        btnSearch.setFocusable(false);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jToolBar3.add(btnSearch);

        jToolBar.add(jToolBar3);

        getContentPane().add(jToolBar, java.awt.BorderLayout.PAGE_START);

        tblPeople.setComponentPopupMenu(jPopupMenu);
        tblPeople.setGridColor(new java.awt.Color(204, 204, 204));
        jScrollPane.setViewportView(tblPeople);

        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        mnuFile.setText("File");

        mnuAddPeople.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        mnuAddPeople.setIcon(new javax.swing.ImageIcon("C:\\Users\\Toan\\Pictures\\icon\\add-icon.png")); // NOI18N
        mnuAddPeople.setText("Add People");
        mnuAddPeople.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAddPeopleActionPerformed(evt);
            }
        });
        mnuFile.add(mnuAddPeople);

        mnuEditPeople.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        mnuEditPeople.setIcon(new javax.swing.ImageIcon("C:\\Users\\Toan\\Pictures\\icon\\edit_user.png")); // NOI18N
        mnuEditPeople.setText("Edit People");
        mnuEditPeople.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditPeopleActionPerformed(evt);
            }
        });
        mnuFile.add(mnuEditPeople);

        jMenuItem2.setText("Logout");
        mnuFile.add(jMenuItem2);

        mnuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuExit);

        mnuBar.add(mnuFile);

        mnuTools.setText("Tools");

        mnuImport.setText("Import CSV");
        mnuImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuImportActionPerformed(evt);
            }
        });
        mnuTools.add(mnuImport);

        mnuExport.setText("Export CSV File");
        mnuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportActionPerformed(evt);
            }
        });
        mnuTools.add(mnuExport);

        mnuBar.add(mnuTools);

        mnuHelp.setText("Help");
        mnuBar.add(mnuHelp);

        setJMenuBar(mnuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddActionPerformed
        NewPeople np = new NewPeople();
        np.setVisible(true);
    }//GEN-LAST:event_mnuAddActionPerformed

    private void mnuEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditActionPerformed
        if (tblPeople.getSelectedColumn() == -1) {
            JOptionPane.showMessageDialog(btnImport, "Please choose one people from the list..", "Warning", WIDTH);
        } else {
            UpdatePeople ep = new UpdatePeople();
            ep.setVisible(true);
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            UpdatePeople.txtUserName.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 1));
            UpdatePeople.txtFullName.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 2));
            UpdatePeople.txtEmailAddress.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 3));
        }
    }//GEN-LAST:event_mnuEditActionPerformed

    private void mnuDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDelActionPerformed

        if (tblPeople.getSelectedColumn() != -1) {
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            String oUser = (String) model.getValueAt(tblPeople.getSelectedRow(), 2);

            int reply = JOptionPane.showConfirmDialog(null, "Do you want to delete [" + oUser.trim() + "] ?", "Delete..", JOptionPane.YES_NO_OPTION);

            if (reply == JOptionPane.YES_OPTION) {
                pList = FileStream.readFile();
                String user = (String) model.getValueAt(tblPeople.getSelectedRow(), 1);

                for (People p : pList) {
                    if (p.getUser().equals(user.trim())) {
                        pList.remove(p);
                        FileStream.writeFileToDelete(pList);
                        break;
                    }
                }
                GetAllPeople();
            }
        } else {
            JOptionPane.showMessageDialog(btnImport, "Please choose one people from the list..", "Warning", WIDTH);
        }
    }//GEN-LAST:event_mnuDelActionPerformed

    private void mnuAddPeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAddPeopleActionPerformed
        NewPeople np = new NewPeople();
        np.setVisible(true);
    }//GEN-LAST:event_mnuAddPeopleActionPerformed

    private void mnuEditPeopleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditPeopleActionPerformed
        if (tblPeople.getSelectedColumn() == -1) {
            JOptionPane.showMessageDialog(btnImport, "Please choose one people from the list..", "Warning", WIDTH);
        } else {
            UpdatePeople ep = new UpdatePeople();
            ep.setVisible(true);
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            UpdatePeople.txtUserName.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 1));
            UpdatePeople.txtFullName.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 2));
            UpdatePeople.txtEmailAddress.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 3));
        }
    }//GEN-LAST:event_mnuEditPeopleActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuImportActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                //file.getAbsolutePath();
                FileStream.importCSV(new File(file.getAbsolutePath()));
                GetAllPeople();
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_mnuImportActionPerformed

    private void mnuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportActionPerformed
        if (tblPeople.getSelectedColumn() != -1) {
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            String select = (String) model.getValueAt(tblPeople.getSelectedRow(), 1);
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                try {
                    //file.getAbsolutePath();
                    FileStream.exportCSV(new File(file.getAbsolutePath()), select.trim());
                } catch (Exception ex) {
                    System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            } else {
                System.out.println("File access cancelled by user.");
            }
        }
    }//GEN-LAST:event_mnuExportActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        NewPeople np = new NewPeople();
        np.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (tblPeople.getSelectedColumn() == -1) {
            JOptionPane.showMessageDialog(btnImport, "Please choose one people from the list..", "Warning", WIDTH);
        } else {
            UpdatePeople ep = new UpdatePeople();
            ep.setVisible(true);
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            UpdatePeople.txtUserName.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 1));
            UpdatePeople.txtFullName.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 2));
            UpdatePeople.txtEmailAddress.setText((String) model.getValueAt(tblPeople.getSelectedRow(), 3));
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (tblPeople.getSelectedColumn() == -1) {
            JOptionPane.showMessageDialog(btnImport, "Please choose one people from the list..", "Warning", WIDTH);
        } else {
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            String oUser = (String) model.getValueAt(tblPeople.getSelectedRow(), 2);

            int reply = JOptionPane.showConfirmDialog(null, "Do you want to delete [" + oUser.trim() + "] ?", "Delete..", JOptionPane.YES_NO_OPTION);

            if (reply == JOptionPane.YES_OPTION) {
                pList = FileStream.readFile();
                String user = (String) model.getValueAt(tblPeople.getSelectedRow(), 1);

                for (People p : pList) {
                    if (p.getUser().equals(user.trim())) {
                        pList.remove(p);
                        FileStream.writeFileToDelete(pList);
                        break;
                    }
                }
                GetAllPeople();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                //file.getAbsolutePath();
                FileStream.importCSV(new File(file.getAbsolutePath()));
                GetAllPeople();
            } catch (Exception ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        if (tblPeople.getSelectedColumn() != -1) {
            DefaultTableModel model = (DefaultTableModel) tblPeople.getModel();
            String select = (String) model.getValueAt(tblPeople.getSelectedRow(), 1);
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                try {
                    //file.getAbsolutePath();
                    FileStream.exportCSV(new File(file.getAbsolutePath()), select.trim());
                } catch (Exception ex) {
                    System.out.println("problem accessing file" + file.getAbsolutePath());
                }
            } else {
                System.out.println("File access cancelled by user.");
            }
        }else{
            JOptionPane.showMessageDialog(btnImport, "Please choose one people from the list..", "Warning", WIDTH);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (cboSearch.getSelectedItem().toString() == " Tìm theo user") {
            int count = 1;
            pList = FileStream.readFile();

            Vector header = new Vector();
            header.add("#");
            header.add("User");
            header.add("Full name");
            header.add("Email");

            Vector data = new Vector();
            for (People p : pList) {
                Vector row = new Vector();
                if (p.getUser().toLowerCase().contains(txtSearch.getText().toLowerCase())) {
                    row.add(" " + count++);
                    row.add(" " + p.getUser());
                    row.add(" " + p.getFullName());
                    row.add(" " + p.getEmail());
                    data.add(row);
                }
            }

            DefaultTableModel dtb = new DefaultTableModel(data, header);
            dtb.fireTableDataChanged();
            tblPeople.setModel(dtb);
        } else if (cboSearch.getSelectedItem().toString() == " Tìm theo full name") {
            int count = 1;
            pList = FileStream.readFile();

            Vector header = new Vector();
            header.add("#");
            header.add("User");
            header.add("Full name");
            header.add("Email");

            Vector data = new Vector();
            for (People p : pList) {
                Vector row = new Vector();
                if (p.getFullName().toLowerCase().contains(txtSearch.getText().toLowerCase())) {
                    row.add(" " + count++);
                    row.add(" " + p.getUser());
                    row.add(" " + p.getFullName());
                    row.add(" " + p.getEmail());
                    data.add(row);
                }
            }

            DefaultTableModel dtb = new DefaultTableModel(data, header);
            dtb.fireTableDataChanged();
            tblPeople.setModel(dtb);
        } else if (cboSearch.getSelectedItem().toString() == " Tìm theo domain") {
            int count = 1;
            pList = FileStream.readFile();

            Vector header = new Vector();
            header.add("#");
            header.add("User");
            header.add("Full name");
            header.add("Email");

            Vector data = new Vector();
            for (People p : pList) {
                Vector row = new Vector();
                if (p.getEmail().toLowerCase().contains(txtSearch.getText().toLowerCase())) {
                    row.add(" " + count++);
                    row.add(" " + p.getUser());
                    row.add(" " + p.getFullName());
                    row.add(" " + p.getEmail());
                    data.add(row);
                }
            }

            DefaultTableModel dtb = new DefaultTableModel(data, header);
            dtb.fireTableDataChanged();
            tblPeople.setModel(dtb);
        }

        //tblPeople.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblPeople.getColumnModel().getColumn(0).setPreferredWidth(25);
        tblPeople.getColumnModel().getColumn(1).setPreferredWidth(85);
        tblPeople.getColumnModel().getColumn(2).setPreferredWidth(240);
        tblPeople.getColumnModel().getColumn(3).setPreferredWidth(340);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        txtSearch.setText("");
        GetAllPeople();
    }//GEN-LAST:event_txtSearchMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccount;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cboSearch;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JToolBar jToolBar;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JMenuItem mnuAdd;
    private javax.swing.JMenuItem mnuAddPeople;
    private javax.swing.JMenuBar mnuBar;
    private javax.swing.JMenuItem mnuDel;
    private javax.swing.JMenuItem mnuEdit;
    private javax.swing.JMenuItem mnuEditPeople;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuExport;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JMenuItem mnuImport;
    private javax.swing.JMenu mnuTools;
    protected static javax.swing.JTable tblPeople;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
